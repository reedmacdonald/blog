{"version":3,"sources":["Pictures/handSand2.png","Pictures/plant5.png","Pictures/cup15.png","Pictures/otherHand.png","Pictures/buildingCornerOne.png","Pictures/apartment.png","Pictures/cube.png","Pictures/profilePic.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","id","className","src","Cube","ProfilePic","Plant","OtherHand","Apartment","CornerOne","Hand","Cup","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,4UC8C5BC,E,2MAhCXC,MAAM,G,wEAKN,OACF,yBAAKC,GAAG,UAEN,yBAAKA,GAAG,QACN,yBAAKC,UAAU,MAAMD,GAAG,QAAxB,SACA,yBAAKC,UAAU,MAAMD,GAAG,QAAxB,UACA,yBAAKC,UAAU,MAAMD,GAAG,QAAxB,WACA,yBAAKC,UAAU,MAAMD,GAAG,QAAxB,aACA,yBAAKC,UAAU,MAAMD,GAAG,QAAxB,YACA,yBAAKC,UAAU,MAAMD,GAAG,QAAxB,WACA,yBAAKC,UAAU,MAAMD,GAAG,QAAxB,WACA,yBAAKC,UAAU,MAAMD,GAAG,QAAxB,QACA,yBAAKC,UAAU,MAAMD,GAAG,QAAO,yBAAKA,GAAG,OAAOE,IAAKC,OACnD,yBAAKF,UAAU,MAAMD,GAAG,SAAQ,yBAAKA,GAAG,aAAaE,IAAKE,QAE5D,yBAAKJ,GAAG,OAAOC,UAAU,WAAU,wCAAiB,wBAAIA,UAAU,UAAd,yCAAiE,6BAAK,4BAAQD,GAAG,cAAa,8CAA8B,yBAAKA,GAAG,QAAQC,UAAU,SAASC,IAAKG,OACxN,yBAAKL,GAAG,OAAOC,UAAU,WAAU,oCAAa,wBAAIA,UAAU,UAAd,yBAAiD,6BAAK,4BAAQD,GAAG,cAAa,8CAA8B,yBAAKA,GAAG,YAAYC,UAAU,SAASC,IAAKI,OACxM,yBAAKN,GAAG,OAAOC,UAAU,WAAU,2CAAoB,wBAAIA,UAAU,UAAd,qCAA6D,6BAAK,4BAAQD,GAAG,cAAa,8CAA8B,yBAAKC,UAAU,SAASD,GAAG,YAAYE,IAAKK,OAC3N,yBAAKP,GAAG,QAAQ,4BAAI,0CAAsB,uGAC1C,yBAAKA,GAAG,OAAOC,UAAU,WAAU,4CAAqB,wBAAIA,UAAU,UAAd,6BAAqD,6BAAK,4BAAQA,UAAU,WAAWD,GAAG,eAAc,8CAA8B,yBAAKC,UAAU,SAASD,GAAG,YAAYE,IAAKM,OAC1O,yBAAKR,GAAG,OAAOC,UAAU,WAAU,sCAAe,wBAAKA,UAAU,UAAf,gCAAyD,6BAAK,4BAASD,GAAG,YAAYC,UAAU,YAAW,8CAA8B,yBAAKA,UAAU,SAASD,GAAG,OAAOE,IAAKO,OAClO,yBAAKT,GAAG,OAAOC,UAAU,WAAU,oCAAa,wBAAIA,UAAU,UAAd,gCAAwD,6BAAK,4BAAQD,GAAG,eAAc,8CAA8B,yBAAKC,UAAU,SAASD,GAAG,MAAME,IAAKQ,Y,GA3B5LC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6afdaff1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/handSand2.609f47fd.png\";","module.exports = __webpack_public_path__ + \"static/media/plant5.e4faaf56.png\";","module.exports = __webpack_public_path__ + \"static/media/cup15.4e718079.png\";","module.exports = __webpack_public_path__ + \"static/media/otherHand.5da1eabd.png\";","module.exports = __webpack_public_path__ + \"static/media/buildingCornerOne.d862ff8c.png\";","module.exports = __webpack_public_path__ + \"static/media/apartment.dda33460.png\";","module.exports = __webpack_public_path__ + \"static/media/cube.d86cb796.png\";","module.exports = __webpack_public_path__ + \"static/media/profilePic.fca5f08c.png\";","import React, {Component} from 'react'\nimport './App.css'\nimport Hand from './Pictures/handSand2.png'\nimport Plant from './Pictures/plant5.png'\nimport Cup from './Pictures/cup15.png'\nimport OtherHand from './Pictures/otherHand.png'\nimport CornerOne from './Pictures/buildingCornerOne.png'\nimport Apartment from './Pictures/apartment.png'\nimport Cube from './Pictures/cube.png'\nimport ProfilePic from './Pictures/profilePic.png'\n\n\n\nclass App extends Component{\n    state={\n      \n    }\n\n  render(){\n    return(\n  <div id='parent'>\n    \n    <div id='div1' >\n      <div className='bar' id='bar1'>World</div>\n      <div className='bar' id='bar2'>Sports</div>\n      <div className='bar' id='bar3'>Opinion</div>\n      <div className='bar' id='bar4'>Lifestyle</div>\n      <div className='bar' id='bar5'>Business</div>\n      <div className='bar' id='bar6'>Culture</div>\n      <div className='bar' id='bar7'>Fashion</div>\n      <div className='bar' id='bar8'>Tech</div>\n      <div className='bar' id='bar9'><img id='cube' src={Cube}></img></div>\n      <div className='bar' id='bar10'><img id='profilePic' src={ProfilePic}></img></div>\n    </div>\n    <div id='div2' className='article'><h5>Interior</h5><h1 className='titles'>9 Air-Cleaning Plants Your Home Needs</h1><br/><button id='navyButton'><b>Read for $0.09</b></button><img id='plant' className='artImg' src={Plant}></img></div>\n    <div id='div3' className='article'><h5>Food</h5><h1 className='titles'>One Month Sugar Detox</h1><br/><button id='pinkButton'><b>Read for $0.99</b></button><img id='otherHand' className='artImg' src={OtherHand}></img></div>\n    <div id='div4' className='article'><h5>Photography</h5><h1 className='titles'>Shooting Minimal Instagram Photos</h1><br/><button id='blueButton'><b>Read for $0.29</b></button><img className='artImg' id='apartment' src={Apartment}></img></div>\n    <div id='div5' ><h1><b>Lifestyle.</b></h1><h4>The latest and best lifestyle articles selected by our editorial staff</h4></div>\n    <div id='div6' className='article'><h5>Architecture</h5><h1 className='titles'>The Brand New NASA Office</h1><br/><button className='topRight' id='blackButton'><b>Read for $0.19</b></button><img className='artImg' id='cornerOne' src={CornerOne}></img></div>\n    <div id='div7' className='article'><h5>Travel</h5><h1  className='titles'>Experience the Saharan Sands</h1><br/><button  id='tanButton' className='topRight'><b>Read for $0.29</b></button><img className='artImg' id='hand' src={Hand}></img></div>\n    <div id='div8' className='article'><h5>Food</h5><h1 className='titles'>Wake Up and Smell the Coffee</h1><br/><button id='greenButton'><b>Read for $0.99</b></button><img className='artImg' id='cup' src={Cup}></img></div>\n  </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}